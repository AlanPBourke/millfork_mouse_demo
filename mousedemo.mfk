import stdio
import c1531
import rasterlib

void main() {

    const array spriteshape @$3000 = file("mouse_sprite.bin")
    const pointer screen = $0400

    ubyte i

    bool x_over                     // Sprite x > 255 flag
    ubyte spr_x                     // Calculated sprite 0 x coord
    ubyte spr_y                     // Calculated sprite 0 y coord
    ubyte spr_data_pointer  @$7f8   // Sprite 0 data location pointer

    ensure_mixedcase()

    // Clear the top part of the default text screen 
    for i, 0, paralleluntil, 250 {
        screen[000+i] = 32
    }

    spr_data_pointer = $c0          // Sprite 0 data at $3000

    vic_bg_color0 = black
    vic_border = light_grey
    vic_spr_ena = $ff               // All sprites on

    disable_irq()                   // CIA interrupts off

    // Raster interrupt at top of screen will read mouse position.
    vic_rasterirq_configure(MainRaster.addr, $00)

    while true
    {
        // Display positional information.
        putchar(19)                     // Cursor home
        putchar(159)                    // Cyan
        putstrz("Mouse Driver x: "z)
        putword(mouse_x)
        putchar(32)
        new_line()      
        putstrz("Mouse Driver y: "z)
        putword(mouse_y)
        putchar(32)
        new_line()

        // Mouse_x and mouse_y are the word-length positional values
        // from the mouse. These don't translate to sprite coords directly.
        spr_x = mouse_x.lo
        spr_y = mouse_y + 30

        // Constrain y coord to top and bottom of visible screen
        // on PAL with standard borders and unexpanded sprite.
        if spr_y < 50 {
            spr_y = 50
        }

        // If the x coord returned by the mouse is > 255, set the 
        // separate MSB for the sprite in $d010, and start the coord
        // back at zero.
        if mouse_x > 255 {
            vic_spr_hi_x = (vic_spr_hi_x & %11111110) | %00000001
            spr_x = mouse_x.lo - 255 - 1
            //spr_x = 0
            x_over = true
        }
        else {
            vic_spr_hi_x = (vic_spr_hi_x & %11111110) | %00000000
            x_over = false
        }

        // Constrain x coord to visible screen (when x < 255)
        if (spr_x < 24) && (x_over == false) {
            spr_x = 24 
        }

        if (spr_x > 65) && (x_over == true) {
            spr_x = 65
        }

        putstrz("Sprite 0 x: "z) 
        putword(0000 + spr_x)
        putchar(32)

        if x_over == true {
            putstrz("($D010 = %11111111)   "z) 
        }
        else {
            putstrz("($D010 = %11111110)   "z) 
        }
        
        new_line()
        putstrz("Sprite 0 y: "z) 
        putword(0000 + spr_y)
        putchar(32)

        vic_spr0_y = spr_y
        vic_spr0_x = spr_x

    }

}

void MainRaster() {
    
    vic_rasterirq_acknowledge()

    c1531_mouse()                   // Read the mouse position

    vic_raster_return()

}

